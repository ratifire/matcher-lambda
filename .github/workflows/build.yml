name: Build

env:
  IMAGE_TAG: ${{ github.sha }}

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment to deploy (prod, dev)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    name: Build and Push
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew

#      - name: run tests
#        run: ./gradlew test

      - name: Build fat JAR
        run: ./gradlew shadowJar

      - name: Show workspace tree
        run: |
          echo "==== FULL TREE ===="
          find . -type f

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Set short SHA
        run: echo "SHORT_SHA=${GITHUB_SHA::8}" >> $GITHUB_ENV

      - name: Upload JAR to S3
        run: |
          aws s3 cp build/libs/lambda-fat.jar s3://skillzzy-matcher-terraform-lambda/build-${{ github.event.inputs.environment }}-matcher-lambda-tstates/matcher-lambda-${{ env.SHORT_SHA }}.jar

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Select .tfvars file based on environment
        run: |
          echo "Selecting .tfvars file for environment: ${{ github.event.inputs.environment }}"
          if [[ ! -f "/home/runner/work/matcher-lambda/matcher-lambda/terraform/lambda/${{ github.event.inputs.environment }}.tfvars" ]]; then
            echo "Error: File ${{ github.event.inputs.environment }}.tfvars does not exist in /home/runner/work/matcher-lambda/matcher-lambda/terraform/lambda."
            exit 1
          fi

      - name: Terraform Init
        working-directory: terraform/lambda
        run: terraform init -backend-config="${{ github.event.inputs.environment }}.backend" -reconfigure

      - name: Terraform Format
        working-directory: terraform/lambda
        run: terraform fmt -check

      - name: Terraform Plan
        working-directory: terraform/lambda
        env:
          TF_VAR_image_tag: ${{ env.SHORT_SHA }}
        run: terraform plan -input=false -var-file="${{ github.event.inputs.environment }}.tfvars"

      - name: Terraform Apply
        working-directory: terraform/lambda
        env:
          TF_VAR_image_tag: ${{ env.SHORT_SHA }}
        run: terraform apply -auto-approve -input=false -var-file="${{ github.event.inputs.environment }}.tfvars"